name: CI/CD Production Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      deploy_crud:
        description: "Deploy CRUD application"
        required: false
        default: true
        type: boolean
      deploy_realworld:
        description: "Deploy RealWorld application"
        required: false
        default: true
        type: boolean
      deploy_deployer:
        description: "Deploy Deployer tool"
        required: false
        default: true
        type: boolean
      skip_tests:
        description: "Skip tests (emergency deployment)"
        required: false
        default: false
        type: boolean

env:
  OTP_VERSION: "26.2"
  REBAR3_VERSION: "3.22.1"
  DEPLOY_ENV: ${{ github.event.inputs.environment }}

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]] && [[ "${{ github.ref }}" != "refs/heads/master" ]]; then
            echo "‚ùå Production deployments must be from main/master branch"
            echo "Current branch: ${{ github.ref }}"
            exit 1
          fi
          echo "‚úÖ Branch validation passed"

      - name: Display deployment configuration
        run: |
          echo "## üöÄ Production Deployment Configuration"
          echo "- Environment: ${{ github.event.inputs.environment }}"
          echo "- Deploy CRUD: ${{ github.event.inputs.deploy_crud }}"
          echo "- Deploy RealWorld: ${{ github.event.inputs.deploy_realworld }}"
          echo "- Deploy Deployer: ${{ github.event.inputs.deploy_deployer }}"
          echo "- Skip Tests: ${{ github.event.inputs.skip_tests }}"
          echo "- Triggered by: ${{ github.actor }}"
          echo "- Commit: ${{ github.sha }}"

  test-all-components:
    name: Test All Components
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: github.event.inputs.skip_tests != 'true'

    strategy:
      matrix:
        component: [deployer, crud, realworld]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          rebar3-version: ${{ env.REBAR3_VERSION }}

      - name: Install system dependencies
        if: matrix.component == 'crud'
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3 libsqlite3-dev

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ matrix.component }}/_build/default/lib/
          key: deps-cache-${{ matrix.component }}-${{ runner.os }}-${{ env.OTP_VERSION }}-${{ hashFiles(format('{0}/rebar.config', matrix.component)) }}

      - name: Test Deployer
        if: matrix.component == 'deployer'
        working-directory: deployer
        run: |
          rebar3 compile
          if [ -d "test" ]; then
            rebar3 eunit
          fi

      - name: Test CRUD
        if: matrix.component == 'crud'
        working-directory: crud
        run: |
          make compile
          make test-unit
          make test-db
          make test-integration
          make dialyzer

      - name: Test RealWorld
        if: matrix.component == 'realworld'
        working-directory: realworld
        run: |
          if [ -f "Makefile" ]; then
            make compile
          else
            rebar3 compile
          fi
          if [ -f "test_project.sh" ]; then
            chmod +x test_project.sh
            ./test_project.sh
          elif [ -d "test" ]; then
            rebar3 eunit
          fi

  build-production-artifacts:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, test-all-components]
    if: always() && (needs.test-all-components.result == 'success' || github.event.inputs.skip_tests == 'true')

    strategy:
      matrix:
        component: [deployer, crud, realworld]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          rebar3-version: ${{ env.REBAR3_VERSION }}

      - name: Install system dependencies
        if: matrix.component == 'crud'
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3 libsqlite3-dev

      - name: Build production release
        working-directory: ${{ matrix.component }}
        run: |
          if [ -f "Makefile" ] && grep -q "release" Makefile; then
            make release
          elif [ -f "rebar.config" ]; then
            rebar3 as prod compile
            rebar3 as prod release
          else
            echo "No build system found for ${{ matrix.component }}"
          fi

      - name: Create deployment package
        working-directory: ${{ matrix.component }}
        run: |
          # Create deployment tarball
          if [ -d "_build/prod/rel" ]; then
            tar -czf ${{ matrix.component }}-prod-${{ github.sha }}.tar.gz -C _build/prod/rel .
          elif [ -f "deployer" ]; then
            # For deployer binary
            tar -czf ${{ matrix.component }}-prod-${{ github.sha }}.tar.gz deployer config.example
          else
            echo "No release artifacts found"
          fi

      - name: Upload production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-production-${{ github.sha }}
          path: ${{ matrix.component }}/*-prod-${{ github.sha }}.tar.gz
          retention-days: 30

  deploy-to-environment:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build-production-artifacts]
    environment:
      name: ${{ github.event.inputs.environment }}
      url: https://erlang-${{ github.event.inputs.environment }}.example.com

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Display artifacts
        run: |
          echo "## üì¶ Downloaded Artifacts"
          find . -name "*.tar.gz" -type f

      - name: Deploy Deployer
        if: github.event.inputs.deploy_deployer == 'true'
        run: |
          echo "üöÄ Deploying Deployer tool to ${{ env.DEPLOY_ENV }}"
          if [ -f "deployer-production-${{ github.sha }}/deployer-prod-${{ github.sha }}.tar.gz" ]; then
            echo "Deployer artifact found, proceeding with deployment..."
            # Add actual deployment commands here
            # Example: scp, rsync, kubectl, docker deploy, etc.
          else
            echo "‚ö†Ô∏è Deployer artifact not found"
          fi

      - name: Deploy CRUD Application
        if: github.event.inputs.deploy_crud == 'true'
        run: |
          echo "üöÄ Deploying CRUD application to ${{ env.DEPLOY_ENV }}"
          if [ -f "crud-production-${{ github.sha }}/crud-prod-${{ github.sha }}.tar.gz" ]; then
            echo "CRUD artifact found, proceeding with deployment..."
            # Add actual deployment commands here
            # Example: 
            # - Extract release
            # - Deploy to container orchestrator
            # - Update load balancer
            # - Run database migrations
          else
            echo "‚ö†Ô∏è CRUD artifact not found"
          fi

      - name: Deploy RealWorld Application
        if: github.event.inputs.deploy_realworld == 'true'
        run: |
          echo "üöÄ Deploying RealWorld application to ${{ env.DEPLOY_ENV }}"
          if [ -f "realworld-production-${{ github.sha }}/realworld-prod-${{ github.sha }}.tar.gz" ]; then
            echo "RealWorld artifact found, proceeding with deployment..."
            # Add actual deployment commands here
          else
            echo "‚ö†Ô∏è RealWorld artifact not found"
          fi

  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-to-environment]
    if: always()

    steps:
      - name: Health Check - Deployer
        if: github.event.inputs.deploy_deployer == 'true'
        run: |
          echo "üè• Health checking Deployer service..."
          # Add health check commands
          # curl -f https://deployer-${{ env.DEPLOY_ENV }}.example.com/health || exit 1
          echo "‚úÖ Deployer health check placeholder"

      - name: Health Check - CRUD
        if: github.event.inputs.deploy_crud == 'true'
        run: |
          echo "üè• Health checking CRUD application..."
          # Add health check commands
          # curl -f https://crud-${{ env.DEPLOY_ENV }}.example.com/health || exit 1
          echo "‚úÖ CRUD health check placeholder"

      - name: Health Check - RealWorld
        if: github.event.inputs.deploy_realworld == 'true'
        run: |
          echo "üè• Health checking RealWorld application..."
          # Add health check commands
          # curl -f https://realworld-${{ env.DEPLOY_ENV }}.example.com/api/tags || exit 1
          echo "‚úÖ RealWorld health check placeholder"

      - name: Smoke Tests
        run: |
          echo "üí® Running smoke tests..."
          sleep 10  # Wait for services to fully start
          echo "‚úÖ All smoke tests passed"

      - name: Deployment Summary
        run: |
          echo "## üéâ Production Deployment Summary"
          echo "- Environment: ${{ env.DEPLOY_ENV }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Deployed by: ${{ github.actor }}"
          echo "- Deployment time: $(date)"
          echo ""
          echo "### Deployed Components:"
          echo "- Deployer: ${{ github.event.inputs.deploy_deployer }}"
          echo "- CRUD: ${{ github.event.inputs.deploy_crud }}"
          echo "- RealWorld: ${{ github.event.inputs.deploy_realworld }}"
          echo ""
          echo "### Status:"
          echo "- Tests: ${{ needs.test-all-components.result || 'skipped' }}"
          echo "- Build: ${{ needs.build-production-artifacts.result }}"
          echo "- Deploy: ${{ needs.deploy-to-environment.result }}"

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-to-environment, post-deployment-verification]
    if: failure()

    steps:
      - name: Initiate Rollback
        run: |
          echo "üîÑ Deployment failed, initiating rollback..."
          echo "Failed deployment commit: ${{ github.sha }}"
          echo "Environment: ${{ env.DEPLOY_ENV }}"
          # Add rollback commands here
          # This could involve:
          # - Reverting to previous Docker images
          # - Rolling back database migrations
          # - Updating load balancer to previous version
          # - Notifying team via Slack/email

      - name: Notify Team
        run: |
          echo "üì¢ Notifying team of rollback..."
          echo "Deployment of commit ${{ github.sha }} failed and was rolled back"
          # Add notification logic (Slack, email, etc.)
