name: CI/CD Staging Pipeline

on:
  pull_request:
    branches: [staging]
    paths:
      - "deployer/**"
      - "crud/**"
      - "realworld/**"

env:
  OTP_VERSION: "26.2"
  REBAR3_VERSION: "3.22.1"

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      deployer: ${{ steps.changes.outputs.deployer }}
      crud: ${{ steps.changes.outputs.crud }}
      realworld: ${{ steps.changes.outputs.realworld }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            deployer:
              - 'deployer/**'
            crud:
              - 'crud/**'
            realworld:
              - 'realworld/**'

  test-deployer:
    name: Test Deployer
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.deployer == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          rebar3-version: ${{ env.REBAR3_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: deployer/_build/default/lib/
          key: deps-cache-deployer-${{ runner.os }}-${{ env.OTP_VERSION }}-${{ hashFiles('deployer/rebar.config') }}

      - name: Compile deployer
        working-directory: deployer
        run: rebar3 compile

      - name: Run deployer tests
        working-directory: deployer
        run: |
          if [ -d "test" ]; then
            rebar3 eunit
          else
            echo "No tests found for deployer, skipping..."
          fi

      - name: Check deployer binary
        working-directory: deployer
        run: |
          if [ -f "deployer" ]; then
            ./deployer --help || echo "Deployer binary exists but help failed"
          else
            echo "Deployer binary not found"
          fi

  test-crud:
    name: Test CRUD Application
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.crud == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          rebar3-version: ${{ env.REBAR3_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3 libsqlite3-dev

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: crud/_build/default/lib/
          key: deps-cache-crud-${{ runner.os }}-${{ env.OTP_VERSION }}-${{ hashFiles('crud/rebar.config') }}

      - name: Compile CRUD
        working-directory: crud
        run: make compile

      - name: Run CRUD tests
        working-directory: crud
        run: |
          make test-unit || echo "Unit tests failed"
          make test-db || echo "DB tests failed"
          make test-integration || echo "Integration tests failed"

  test-realworld:
    name: Test RealWorld Application
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.realworld == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang/OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          rebar3-version: ${{ env.REBAR3_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: realworld/_build/default/lib/
          key: deps-cache-realworld-${{ runner.os }}-${{ env.OTP_VERSION }}-${{ hashFiles('realworld/rebar.config') }}

      - name: Compile RealWorld
        working-directory: realworld
        run: |
          if [ -f "Makefile" ]; then
            make compile
          else
            rebar3 compile
          fi

      - name: Run RealWorld tests
        working-directory: realworld
        run: |
          if [ -f "test_project.sh" ]; then
            chmod +x test_project.sh
            ./test_project.sh
          elif [ -d "test" ]; then
            rebar3 eunit
          else
            echo "No tests found for realworld, running basic compile check"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  integration-summary:
    name: Integration Summary
    runs-on: ubuntu-latest
    needs: [test-deployer, test-crud, test-realworld, security-scan]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "## üß™ Staging Pipeline Results"
          echo "- Deployer: ${{ needs.test-deployer.result }}"
          echo "- CRUD: ${{ needs.test-crud.result }}"
          echo "- RealWorld: ${{ needs.test-realworld.result }}"

          echo "- Security: ${{ needs.security-scan.result }}"

      - name: Set final status
        run: |
          if [[ "${{ needs.test-deployer.result }}" == "failure" ]] || 
             [[ "${{ needs.test-crud.result }}" == "failure" ]] || 
             [[ "${{ needs.test-realworld.result }}" == "failure" ]]; then
            echo "‚ùå Some tests failed in staging pipeline"
            exit 1
          else
            echo "‚úÖ All staging tests passed!"
          fi
