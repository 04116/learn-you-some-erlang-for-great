# Docker Compose for Cookie CRUD API
# Provides development, testing, and production environments

services:
  # =============================================================================
  # Cookie CRUD API Service
  # =============================================================================
  cookie-crud:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    ports:
      - "8080:8080"
    environment:
      - COOKIE_CRUD_PORT=8080
      - COOKIE_CRUD_DB_FILE=/opt/cookie_crud/data/cookies.db
      - COOKIE_CRUD_DB_POOL_SIZE=10
    volumes:
      - cookie_data:/opt/cookie_crud/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/cookies"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - cookie_network

  # =============================================================================
  # Development Environment
  # =============================================================================
  cookie-crud-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
      - "4369:4369"      # EPMD port
      - "9001-9005:9001-9005"  # Distributed Erlang ports
    environment:
      - COOKIE_CRUD_ENV=development
      - COOKIE_CRUD_PORT=8080
      - COOKIE_CRUD_DB_FILE=cookies_dev.db
      - COOKIE_CRUD_DB_POOL_SIZE=5
    volumes:
      - .:/app
      - dev_data:/app/data
    working_dir: /app
    command: ["make", "dev"]
    networks:
      - cookie_network
    profiles:
      - dev

  # =============================================================================
  # Testing Environment
  # =============================================================================
  cookie-crud-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - COOKIE_CRUD_ENV=test
      - COOKIE_CRUD_PORT=8081
      - COOKIE_CRUD_DB_FILE=cookies_test.db
      - COOKIE_CRUD_DB_POOL_SIZE=3
    volumes:
      - .:/app
    working_dir: /app
    command: ["make", "test"]
    networks:
      - cookie_network
    profiles:
      - test

  # =============================================================================
  # Load Testing with wrk
  # =============================================================================
  load-test:
    image: alpine:3.18
    depends_on:
      cookie-crud:
        condition: service_healthy
    volumes:
      - ./bench:/bench
    working_dir: /bench
    command: >
      sh -c "
        apk add --no-cache curl wrk &&
        echo 'Starting load tests...' &&
        echo 'Basic GET test:' &&
        wrk -t4 -c10 -d30s --timeout 10s http://cookie-crud:8080/cookies &&
        echo 'POST performance test:' &&
        wrk -t2 -c5 -d10s -s post_test.lua http://cookie-crud:8080/cookies &&
        echo 'Load tests completed!'
      "
    networks:
      - cookie_network
    profiles:
      - load-test

  # =============================================================================
  # Monitoring with Prometheus (optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=50GB'
      - '--storage.tsdb.wal-compression'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - cookie_network
    profiles:
      - monitoring

  # =============================================================================
  # Grafana Dashboard (optional)
  # =============================================================================
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - cookie_network
    profiles:
      - monitoring

  # =============================================================================
  # Node Exporter for system metrics (optional)
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:v1.6.0
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - cookie_network
    profiles:
      - monitoring

  # =============================================================================
  # cAdvisor for container metrics (optional)
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - cookie_network
    profiles:
      - monitoring

  # =============================================================================
  # Reverse Proxy with Nginx (production-like setup)
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      cookie-crud:
        condition: service_healthy
    networks:
      - cookie_network
    profiles:
      - production

# =============================================================================
# Networks
# =============================================================================
networks:
  cookie_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  cookie_data:
    driver: local
  dev_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local